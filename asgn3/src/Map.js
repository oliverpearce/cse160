class Map {
	constructor() {
		this.heightMap = [
			[1, 3, 4, 2, 1, 3, 2, 1, 4, 2, 3, 1, 4, 2, 3, 1, 
                1, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2, 1, 3, 4, 1, 2],
            [2, 3, 1, 4, 2, 1, 3, 2, 1, 4, 2, 3, 1, 4, 3, 1,
                2, 1, 4, 3, 1, 4, 3, 2, 1, 2, 3, 4, 1, 3, 2, 1],
            [3, 2, 4, 1, 3, 1, 2, 3, 4, 1, 3, 2, 4, 1, 3, 4, 
                2, 1, 3, 2, 4, 3, 1, 4, 2, 3, 1, 2, 4, 1, 3, 2],
            [1, 3, 2, 4, 1, 4, 3, 1, 2, 3, 1, 2, 4, 3, 2, 4, 
                1, 2, 3, 4, 2, 1, 3, 1, 4, 3, 2, 4, 3, 1, 2, 4],
            [2, 3, 1, 4, 2, 1, 3, 4, 1, 2, 3, 1, 4, 2, 3, 4, 
                1, 3, 2, 4, 1, 3, 1, 2, 4, 3, 1, 4, 2, 3, 1, 2],
            [4, 2, 3, 1, 4, 3, 2, 1, 2, 3, 1, 4, 3, 2, 4, 1, 
                2, 1, 3, 4, 2, 3, 4, 1, 2, 4, 3, 1, 2, 1, 4, 3],
            [1, 4, 2, 3, 1, 3, 2, 4, 1, 3, 2, 1, 4, 2, 3, 1, 
                2, 4, 3, 1, 4, 2, 3, 1, 4, 2, 1, 3, 2, 1, 4, 3],
            [4, 1, 2, 3, 4, 2, 1, 3, 2, 1, 4, 3, 1, 4, 3, 2, 
                1, 3, 4, 1, 3, 2, 4, 1, 2, 3, 1, 4, 3, 2, 1, 2],
            [3, 1, 4, 2, 3, 4, 2, 1, 3, 2, 1, 4, 3, 1, 2, 4, 
                1, 3, 2, 4, 1, 4, 3, 2, 3, 1, 2, 4, 3, 1, 2, 4],
            [4, 1, 3, 2, 1, 2, 3, 4, 1, 4, 3, 2, 1, 4, 2, 3, 
                1, 2, 4, 3, 2, 1, 4, 3, 1, 4, 2, 1, 3, 2, 4, 1],

            [2, 3, 4, 1, 3, 2, 4, 1, 4, 1, 2, 3, 2, 4, 3, 1, 
                4, 3, 2, 1, 3, 4, 1, 2, 3, 1, 4, 2, 4, 3, 1, 2],
            [4, 1, 2, 3, 2, 4, 1, 3, 2, 1, 4, 2, 3, 4, 1, 2, 
                4, 3, 1, 2, 3, 4, 1, 3, 2, 1, 4, 3, 1, 4, 2, 3],
            [1, 4, 2, 3, 1, 3, 4, 1, 2, 1, 3, 4, 2, 1, 4, 3, 
                2, 1, 3, 2, 4, 3, 1, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [3, 1, 4, 2, 1, 4, 3, 2, 1, 4, 2, 3, 4, 1, 3, 2, 
                1, 2, 4, 3, 1, 3, 2, 4, 1, 4, 3, 2, 1, 3, 1, 4],
            [2, 3, 1, 4, 2, 1, 3, 2, 4, 3, 1, 2, 4, 1, 2, 3, 
                1, 4, 3, 2, 1, 3, 4, 2, 1, 3, 2, 1, 4, 2, 3, 4],
            [1, 4, 2, 3, 1, 3, 4, 1, 2, 3, 1, 4, 2, 3, 1, 4, 
                2, 3, 4, 1, 2, 3, 1, 2, 4, 1, 3, 2, 4, 1, 2, 3],
            [3, 1, 4, 2, 4, 1, 3, 2, 1, 4, 3, 2, 1, 3, 4, 2, 
                1, 4, 2, 3, 1, 3, 4, 2, 1, 3, 4, 1, 2, 3, 4, 1],
            [2, 4, 1, 3, 4, 1, 2, 3, 2, 4, 1, 3, 2, 1, 3, 4, 
                1, 2, 4, 3, 1, 2, 4, 3, 2, 1, 3, 4, 2, 1, 3, 1],
            [1, 4, 2, 3, 1, 2, 4, 3, 1, 3, 2, 4, 2, 1, 3, 1, 
                4, 2, 3, 4, 1, 4, 2, 3, 1, 4, 3, 2, 4, 1, 2, 3],
            [2, 1, 4, 3, 1, 4, 3, 2, 4, 1, 2, 3, 2, 1, 4, 3, 
                1, 2, 4, 3, 1, 4, 3, 2, 2, 4, 1, 3, 1, 2, 4, 3],

            [1, 3, 4, 2, 3, 1, 2, 4, 2, 3, 4, 1, 2, 1, 3, 4, 
                2, 1, 3, 4, 3, 2, 1, 4, 1, 3, 2, 4, 1, 3, 4, 2],
            [3, 1, 2, 4, 1, 2, 4, 3, 1, 3, 4, 2, 3, 4, 1, 2, 
                3, 1, 4, 2, 1, 4, 3, 2, 1, 3, 2, 4, 3, 1, 4, 2],
            [4, 2, 3, 1, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2, 
                3, 1, 4, 2, 1, 3, 4, 2, 1, 2, 4, 3, 1, 3, 2, 4],
            [2, 4, 1, 3, 2, 1, 4, 3, 2, 1, 3, 4, 3, 1, 4, 2, 
                3, 1, 4, 2, 4, 3, 1, 2, 1, 3, 2, 4, 3, 1, 2, 4],
            [1, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2], 

            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2],
            [2, 2, 3, 4, 3, 1, 4, 2, 1, 3, 2, 4, 2, 1, 4, 3, 
                1, 3, 2, 4, 1, 4, 3, 2, 4, 1, 3, 2, 1, 4, 3, 2]
		];

		this.cubes = [];

		this.createMap();
	}

	createMap() {
        // iterate through every x
        for (let x = 0; x < 32; x++) {
          let xArray = [];
          // iterate through every z
          for (let z = 0; z < 32; z++) {
            // total height of the column
            let wallHeight = this.heightMap[x][z];
            let column = [];
            
            // Create a column of cubes depending on value
            for (let y = 0; y < wallHeight; y++) {
              let cube = new Cube();
              cube.matrix.scale(0.1, 0.1, 0.1);
              cube.matrix.setTranslate(x, y, z);
              
              // use random texture if top block!
              if (y === wallHeight - 1) {
                // [0, 1] + 1
                cube.textureNum = Math.floor(Math.random() * 2) + 1; 
              } else {
                cube.textureNum = 1; 
              }
              
              column.push(cube);
            }
            
            xArray.push(column);
          }
          this.cubes.push(xArray);
        }
      }

	render() {
		for (let x = 0; x < 32; x++) {
			for (let z = 0; z < 32; z++) {
				for (let y = 0; y < this.cubes[x][z].length; y++) {
					if (this.cubes[x][z][y] !== null) {
						this.cubes[x][z][y].render();
					}
				}
			}
		}
	}
}